{
  "name": "e2e-tests",
  "version": "1.0.0",
  "license": "Apache-2.0",
  "description": "SkillTree Dashboard and Client Display End to End Tests",
  "author": "SkillTree Team",
  "main": "index.js",
  "scripts": {
    "licenseDepCheck": "license-checker --production --onlyAllow='MIT;ISC;Apache-2.0' --summary",
    "licenseHeaderCheck": "license-check-and-add check -f '../license-add/license-add-config.json'",
    "licenseHeaderAdd": "license-check-and-add add -f ../license-add/license-add-config.json",
    "licenseCheck": "npm run licenseHeaderCheck && npm run licenseDepCheck",
    "cy:open": "cypress open",
    "cy:open:postgres": "TZ=UTC cypress open --env db=postgres",
    "cy:open:oauth": "TZ=UTC cypress open --env oauthMode=true",
    "cy:open:dev": "TZ=UTC cypress open --config baseUrl=http://localhost:8082 --env failOnSnapshotDiff=false",
    "cy:open:dev:postgres": "TZ=UTC cypress open --config baseUrl=http://localhost:8082 --env db=postgres",
    "cy:open:dev:oauth": "TZ=UTC cypress open --config baseUrl=http://localhost:8082 --env oauthMode=true",
    "cy:run": "TZ=UTC npm run licenseCheck && cypress run",
    "cy:run:postgres": "TZ=UTC npm run licenseCheck && cypress run --env db=postgres",
    "cy:run:oauth": "TZ=UTC npm run licenseCheck && cypress run --env oauthMode=true",
    "cy:run:accessibility": "TZ=UTC npm run licenseCheck && cypress run --config experimentalRunEvents=true --browser chrome --headless --spec \"cypress/integration/accessibility*.js,cypress/integration/client-display/client-display_accessibility.js\"",
    "cy:run:dev": "TZ=UTC cypress run --config baseUrl=http://localhost:8082",
    "cy:run:dev:metrics": "TZ=UTC cypress run --config baseUrl=http://localhost:8082 --spec \"cypress/integration/metrics/subjectMetrics_spec.js\"",
    "cy:run:dev:clientDisplay": "TZ=UTC cypress run --config baseUrl=http://localhost:8082 --spec \"cypress/integration/client-display/**.js\"",
    "cy:run:dev:accessibility": "TZ=UTC cypress run --browser chrome --headless --config baseUrl=http://localhost:8082 --spec cypress/integration/accessibility*.js",
    "cy:run:dev:postgres": "TZ=UTC cypress run --config baseUrl=http://localhost:8082 --env db=postgres",
    "cy:run:dev:oauth": "TZ=UTC cypress run --config baseUrl=http://localhost:8082 --env oauthMode=true",
    "cy:verify": "cypress verify",
    "backend:start": "java -Dspring.config.location=classpath:/application.yml,file:serverConfigs/backend_application.properties -jar ../service/target/skills-service-*.jar",
    "backend:start:postgresql": "java -Dspring.config.location=classpath:/application.yml,file:serverConfigs/backend_application.properties -Dspring.datasource.url=jdbc:postgresql://localhost:5432/skills -Dspring.datasource.username=postgres -Dspring.datasource.password=skillsPassword -jar ../service/target/skills-service-*.jar",
    "backend:start:redis": "java -Dspring.config.location=classpath:/application.yml,file:serverConfigs/backend_application.properties -Dspring.session.store-type=redis -jar ../service/target/skills-service-*.jar ",
    "backend:start:rabbitmq": "java -Dspring.config.location=classpath:/application.yml,file:serverConfigs/backend_application.properties -Dskills.websocket.enableStompBrokerRelay=true -Dskills.websocket.relayHost=localhost -Dlogging.level.org.springframework.web.socket=TRACE -jar ../service/target/skills-service-*.jar ",
    "backend:start:oauth": "java -Dspring.config.location=classpath:/application.yml,file:serverConfigs/backend_application.properties,file:serverConfigs/backend_oauth_application.properties -jar ../service/target/skills-service-*.jar ",
    "backend:start:ci": "mkdir -p ./logs && npm run backend:start > ./logs/skills-service.out &",
    "backend:start:postgresql:ci": "mkdir -p ./logs && npm run backend:start:postgresql > ./logs/skills-service.out &",
    "backend:start:redis:ci": "mkdir -p ./logs && npm run backend:start:redis > ./logs/skills-service.out &",
    "backend:start:oauth:ci": "mkdir -p ./logs && npm run backend:start:oauth > ./logs/skills-service.out &",
    "backend:start:rabbitmq:ci": "mkdir -p ./logs && npm run backend:start:rabbitmq > ./logs/skills-service.out &",
    "backend:waitToStart": "npx wait-on -t 100000 http://localhost:8080",
    "backend:resetDb": "java -cp ./cypress/db/h2-1.4.200.jar org.h2.tools.RunScript -url jdbc:h2:tcp://localhost:9090/mem:skills -user sa -script ./cypress/db/reset.sql",
    "backend:clearDb": "java -cp ./cypress/db/h2-1.4.200.jar org.h2.tools.RunScript -url jdbc:h2:tcp://localhost:9090/mem:skills -user sa -script ./cypress/db/clear.sql",
    "backend:resetDb:postgres": "export PGPASSWORD=skillsPassword && psql -U postgres -h localhost -d skills -f ./cypress/db/reset.sql",
    "backend:clearDb:postgres": "export PGPASSWORD=skillsPassword && psql -U postgres -h localhost -d skills -f ./cypress/db/clear.sql",
    "backend:dropAllDBTables:postgres": "export PGPASSWORD=skillsPassword && psql -U postgres -h localhost -d skills -f ./cypress/db/dropTables.sql",
    "client-display:serve": "cd ../client-display && npm prune && npm install && npm run serve",
    "client-display:serve:ci": "mkdir -p ./logs && npm run client-display:serve > ./logs/client-display.out &",
    "client-display:serve:ci:oauth": "mkdir -p ./logs && VUE_APP_AUTHENTICATION_URL=hydra npm run client-display:serve > ./logs/client-display.out &",
    "client-display:waitToStart": "npx wait-on -t 80000 http://localhost:8083",
    "cyServices:start:skills-service": "npm run backend:start:ci && npm run backend:waitToStart",
    "cyServices:start:skills-service:postgresql": "npm run fake-smtp:start:ci &&  npm run backend:start:postgresql:ci && npm run backend:waitToStart",
    "cyServices:start:skills-service:redis": "npm run fake-smtp:start:ci &&  npm run backend:start:redis:ci && npm run backend:waitToStart",
    "cyServices:start:skills-service:oauth": "npm run fake-smtp:start:ci &&  npm run backend:start:oauth:ci && npm run backend:waitToStart",
    "cyServices:start:skills-service:rabbitmq": "npm run fake-smtp:start:ci &&  npm run backend:start:rabbitmq:ci && npm run backend:waitToStart",
    "cyServices:start:client-display": "npm run client-display:serve:ci && npm run client-display:waitToStart",
    "cyServices:start:client-display:oauth": "npm run client-display:serve:ci:oauth && npm run client-display:waitToStart",
    "cyServices:start": "npm run cyServices:start:skills-service && npm run fake-smtp:start:ci && npm run cyServices:start:client-display",
    "cyServices:kill:skills-service": "for procid in $(ps -aux | grep \"serverConfigs/.*properties\" | grep \"jar$\" | awk '{print $2}'); do echo \"killing skills-service ${procid}\"; kill -9 $procid; done",
    "cyServices:kill:client-display": "for procid in $(ps -aux | grep \"client-display\" | grep \"serve\" | grep -v \"grep\" | awk '{print $2}'); do echo \"killing skills-display ${procid}\"; kill -9 $procid; done",
    "cyServices:kill:client-display:1": "for procid in $(ps -aux | grep \"client-display\" | grep \"vue-cli-service serve\" | grep -v \"grep\" | awk '{print $2}'); do echo \"killing skills-display  ${procid}\"; kill -9 $procid; done",
    "cyServices:kill": "npm run cyServices:kill:skills-service && npm run cyServices:kill:client-display && npm run cyServices:kill:client-display:1 && npm run fake-smtp:stop",
    "print-env": "print-env",
    "fake-smtp:start": "fake-smtp-server --smtp-port 1026 --http-port 1081",
    "fake-smtp:start:ci": "mkdir -p ./logs && nohup npm run fake-smtp:start > ./logs/fake-smtp.log &",
    "fake-smtp:stop": "fuser -k 1081/tcp"
  },
  "devDependencies": {
    "@bahmutov/print-env": "2.1.2",
    "badge-maker": "^3.3.0",
    "cypress": "6.4.0",
    "cypress-audit": "^0.2.3",
    "cypress-axe": "^0.10.0",
    "cypress-file-upload": "4.1.1",
    "cypress-image-snapshot": "4.0.1",
    "dayjs": "1.9.6",
    "eslint": "7.9.0",
    "fake-smtp-server": "0.8.0",
    "license-check-and-add": "3.0.4",
    "license-checker": "25.0.1",
    "moment": "2.29.1",
    "moment-timezone": "0.5.31",
    "object-scan": "13.6.7",
    "wait-on": "5.2.0"
  }
}
