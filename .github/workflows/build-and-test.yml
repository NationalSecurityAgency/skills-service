# Copyright 2025 SkillTree
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Continuous Integration

on:
  schedule:
    - cron: '0 5 * * *'
  workflow_dispatch:
  push:
    paths-ignore:
      - 'README.md'
      - '.github/workflows/build-and-test-postgres.yml'
      - '.github/workflows/generate-images-for-regression-tests.yml'
  pull_request:
    paths-ignore:
      - 'README.md'
      - '.github/workflows/build-and-test-postgres.yml'
      - '.github/workflows/generate-images-for-regression-tests.yml'

jobs:
  build-skills-service-for-ui-tests:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup node version [${{ vars.NODE_VERSION }}]
        uses: actions/setup-node@v4
        with:
          node-version: ${{ vars.NODE_VERSION }}

      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ vars.JAVA_VERSION }}

      - name: Print Versions
        run: |
          java -version
          mvn --version
          google-chrome --version
          mvn -v

      - name: Cache local Maven repository
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build skills-service
        env:
          MAVEN_OPTS: -Xmx2048m
        run: |
          mvn --batch-mode install -DskipTests

      - name: upload service jar
        uses: actions/upload-artifact@v4
        with:
          name: service jar
          path: ./service/target/*.jar

  ui-tests-against-postgres:
#    if: github.event_name == 'schedule-never'
    runs-on: ubuntu-latest
    needs: [build-skills-service-for-ui-tests]
    strategy:
      fail-fast: false
      matrix:
        #IMPORTANT: must, must, must match the total number of containers below: runSubsetOfCypressTests.sh.sh -t <num_of_containers>
        container: [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]

    services:
      postgres:
        # Docker Hub image
        image: postgres
        env:
          POSTGRES_PASSWORD: skillsPassword
          POSTGRES_DB: skills
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: print default vars  [${{ github.event_name }}]
        run: |
          echo "${{ github.event_name }}"

      - name: Install libs
        run: |
          sudo apt-get install -y postgresql-client
          sudo psql --version

      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ vars.NODE_VERSION }}

      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ vars.JAVA_VERSION }}

      - name: Print Versions
        run: |
          java -version
          npm -v
          node -v
          google-chrome --version

      - uses: actions/download-artifact@v4
        with:
          name: service jar
          path: ./service/target/

      - name: Prep Services for Cypress tests
        run: |
          cd e2e-tests
          npm install
          npm run backend:dropAllDBTables
          npm run cyServices:start
          cd ..

      - name: Run Cypress tests
        run: |
          cd e2e-tests
          ../.github/scripts/runSubsetOfCypressTests.sh -t 15 -c ${{ matrix.container }}
          cd ..
        env:
          ELECTRON_EXTRA_LAUNCH_ARGS: '--disable-gpu'

      - name: upload result artifacts
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: UI test artifacts (${{ matrix.container }})
          path: |
            ./e2e-tests/logs
            ./e2e-tests/cypress/videos
            ./e2e-tests/cypress/screenshots
            ./e2e-tests/cypress/visualRegression/diff
            ./font-list.txt

      - name: merge mochawesome results
        run: |
          cd e2e-tests
          npx mochawesome-merge "cypress/results/*.json" > mochawesome.json
          mv mochawesome.json mochawesome-${{ matrix.container }}.json
          cd ../

      - name: Upload mochawesome results
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: mochawesome(${{ matrix.container }}).json
          path: |
            ./e2e-tests/mochawesome-${{ matrix.container }}.json

      - name: verify that new screenshot snapshots were not created
        run: |
          cd e2e-tests
          npm run verifyThatNewSnapshotsAreNotCreated

  combine-cypress-mochawesome-results:
    runs-on: ubuntu-latest
    if: ${{ !cancelled() }}
#    if: github.event_name == 'schedule-never'
    needs: [ui-tests-against-postgres]
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ vars.NODE_VERSION }}

      - name: Print Versions
        run: |
          mvn --version

      - name: Download Mochawesome Artifacts
        uses: actions/download-artifact@v4
        with:
          path: e2e-tests/mochawesome-artifacts
          pattern: mochawesome*
          merge-multiple: true

      - name: Build Mochawesome Report
        run: |
          cd e2e-tests
          ls -R mochawesome-artifacts
          npm install
          npx mochawesome-merge "mochawesome-artifacts/*.json" > mochawesome.json
          npx marge mochawesome.json
          cd ../

      - name: Upload Report
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: mochawesome-report
          path: |
            ./e2e-tests/mochawesome-report
        

  ui-tests-against-postgres-cypress-dashboard:
    if: github.event_name == 'schedule-never'
    runs-on: ubuntu-latest
#    container:
#      image: cypress/browsers:node-22.16.0-chrome-137.0.7151.119-1-ff-139.0.4-edge-137.0.3296.62-1
    needs: [build-skills-service-for-ui-tests]
    strategy:
      # when one test fails, DO NOT cancel the other
      # containers, because this will kill Cypress processes
      # leaving the Dashboard hanging ...
      # https://github.com/cypress-io/github-action/issues/48
      fail-fast: false
      matrix:
        # run in parallel
        containers: [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]

    services:
      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: skillsPassword
          POSTGRES_DB: skills
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432

    steps:
      - name: Install libs
        run: |
          sudo apt-get install -y postgresql-client
          sudo psql --version

      - uses: actions/checkout@v4

      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ vars.JAVA_VERSION }}

      - name: Print Versions
        run: |
          java -version
          npm -v
          node -v
          google-chrome --version

      - uses: actions/download-artifact@v4
        with:
          name: service jar
          path: ./service/target/

      - name: Prep Services for Cypress tests
        run: |
          cd e2e-tests
          npm install
          npm run backend:dropAllDBTables
          npm run cyServices:start
          cd ..

      - name: Run Cypress tests
        uses: cypress-io/github-action@v5
        with:
          working-directory: e2e-tests
          record: true
          parallel: true
          group: 'skills-service tests'
          tag: "${{ github.workflow }}"
          browser: chrome
        env:
          # pass the Dashboard record key as an environment variable
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
          # pass GitHub token to allow accurately detecting a build vs a re-run build
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: upload result artifacts
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: UI test with cypress dashboards (${{ matrix.containers }})
          path: |
            ./e2e-tests/logs
            ./e2e-tests/cypress/visualRegression/diff

      - name: verify that new screenshot snapshots were not created
        run: |
          cd e2e-tests
          npm run verifyThatNewSnapshotsAreNotCreated


  service-against-postgresql:
    runs-on: ubuntu-latest
    strategy:
      # when one test fails, DO NOT cancel the other containers
      fail-fast: false
      matrix:
        # run 3 copies of the current job in parallel
        # IMPORTANT: must, must, must match the total number of containers below: runSubsetOfServiceTests.sh -t <num_of_containers>
        container: [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 ]

    services:
      postgres:
        image: postgres
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: skillsPassword
          POSTGRES_DB: skills
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ vars.NODE_VERSION }}

      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ vars.JAVA_VERSION }}

      - name: Print Versions
        run: |
          mvn --version
          java -version

      - name: Cache local Maven repository
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Run skills-service tests
        env:
          MAVEN_OPTS: -Xmx3G -XX:+UnlockDiagnosticVMOptions -XX:GCLockerRetryAllocationCount=100
        run: |
          cd service
          ../.github/scripts/runSubsetOfServiceTests.sh -t 15 -c ${{ matrix.container }} -d "-Dspring.datasource.url=jdbc:postgresql://localhost:5432/skills -Dspring.datasource.username=postgres -Dspring.datasource.password=skillsPassword"

      - name: upload result artifacts
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: Service test artifacts (${{ matrix.container }})
          path: |
            ./service/target/*.log
            ./e2e-tests/logs
            ./e2e-tests/cypress/visualRegression/diff

      - name: Upload surefire reports
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: surefire-artifacts-(${{ matrix.container }})
          path: |
            ./service/target/surefire-reports      


  combine-surefire-reports:
    runs-on: ubuntu-latest
    if: ${{ !cancelled() }}
    needs: [service-against-postgresql]
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ vars.NODE_VERSION }}

      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ vars.JAVA_VERSION }}

      - name: Print Versions
        run: |
          java -version
          mvn --version
          google-chrome --version 

      - name: Download Surefire Artifacts
        uses: actions/download-artifact@v4
        with:
          path: service/target/surefire-reports
          pattern: surefire-artifacts*
          merge-multiple: true

      - name: Build Surefire Report
        run: |
          cd service
          mvn surefire-report:report-only
          cd ../

      - name: Upload Surefire Report
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: surefire-report
          path: |
            ./service/target/reports